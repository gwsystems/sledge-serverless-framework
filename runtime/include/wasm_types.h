#pragma once

#include <stdint.h>

#define WASM_PAGE_SIZE            (1024 * 64) /* 64KB */
#define WASM_MEMORY_PAGES_INITIAL (1 << 8)    /* 256 Pages ~16MB */
#define WASM_MEMORY_PAGES_MAX     (1 << 16)   /* 32,768 Pages ~4GB */
#define WASM_STACK_SIZE           (1 << 19)   /* 512KB */

/* Wasm initialization functions generated by the compiler */
#define AWSM_ABI_INITIALIZE_GLOBALS "populate_globals"
#define AWSM_ABI_INITIALIZE_MEMORY  "populate_memory"
#define AWSM_ABI_INITIALIZE_TABLE   "populate_table"
#define AWSM_ABI_ENTRYPOINT         "wasmf__start"

/* Based on example traps listed at https://webassembly.org/docs/security/ */
typedef enum
{
	WASM_TRAP_EXIT                          = 1,
	WASM_TRAP_INVALID_INDEX                 = 2,
	WASM_TRAP_MISMATCHED_FUNCTION_TYPE      = 3,
	WASM_TRAP_PROTECTED_CALL_STACK_OVERFLOW = 4,
	WASM_TRAP_OUT_OF_BOUNDS_LINEAR_MEMORY   = 5,
	WASM_TRAP_ILLEGAL_ARITHMETIC_OPERATION  = 6,
	WASM_TRAP_COUNT
} wasm_trap_t;

#define AWSM_ABI_STARTING_PAGES "starting_pages"
#define AWSM_ABI_MAX_PAGES      "max_pages"

/* functions in the module to lookup and call per sandbox. */
typedef void (*awsm_abi_init_globals_fn_t)(void);
typedef void (*awsm_abi_init_mem_fn_t)(void);
typedef void (*awsm_abi_init_tbl_fn_t)(void);
typedef void (*awsm_abi_init_libc_fn_t)(int32_t, int32_t);
typedef int32_t (*awsm_abi_entrypoint_fn_t)(void);
